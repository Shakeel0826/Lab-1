% Classification using perceptron
% Reading apple images
A1=imread('apple_04.jpg');
A2=imread('apple_05.jpg');
A3=imread('apple_06.jpg');
A4=imread('apple_07.jpg');
A5=imread('apple_11.jpg');
A6=imread('apple_12.jpg');
A7=imread('apple_13.jpg');
A8=imread('apple_17.jpg');
A9=imread('apple_19.jpg');

% Reading pears images
P1=imread('pear_01.jpg');
P2=imread('pear_02.jpg');
P3=imread('pear_03.jpg');
P4=imread('pear_09.jpg');

% Calculate for each image, colour and roundness
% For Apples
% 1st apple image(A1)
hsv_value_A1=spalva_color(A1); %color
metric_A1=apvalumas_roundness(A1); %roundness
% 2nd apple image(A2)
hsv_value_A2=spalva_color(A2); %color
metric_A2=apvalumas_roundness(A2); %roundness
% 3rd apple image(A3)
hsv_value_A3=spalva_color(A3); %color
metric_A3=apvalumas_roundness(A3); %roundness
% 4th apple image(A4)
hsv_value_A4=spalva_color(A4); %color
metric_A4=apvalumas_roundness(A4); %roundness
% 5th apple image(A5)hsv_value_A5=spalva_color(A5); %color
hsv_value_A5=spalva_color(A5)
metric_A5=apvalumas_roundness(A5); %roundness
% 6th apple image(A6)
hsv_value_A6=spalva_color(A6); %color
metric_A6=apvalumas_roundness(A6); %roundness
% 7th apple image(A7)
hsv_value_A7=spalva_color(A7); %color
metric_A7=apvalumas_roundness(A7); %roundness
% 8th apple image(A8)
hsv_value_A8=spalva_color(A8); %color
metric_A8=apvalumas_roundness(A8); %roundness
% 9th apple image(A9)
hsv_value_A9=spalva_color(A9); %color
metric_A9=apvalumas_roundness(A9); %roundness

%For Pears
%1st pear image(P1)
hsv_value_P1=spalva_color(P1); %color
metric_P1=apvalumas_roundness(P1); %roundness
%2nd pear image(P2)
hsv_value_P2=spalva_color(P2); %color
metric_P2=apvalumas_roundness(P2); %roundness
%3rd pear image(P3)
hsv_value_P3=spalva_color(P3); %color
metric_P3=apvalumas_roundness(P3); %roundness
%2nd pear image(P4)
hsv_value_P4=spalva_color(P4); %color
metric_P4=apvalumas_roundness(P4); %roundness

% create a matrix of features
x1=[hsv_value_A4 hsv_value_A5 hsv_value_A6 hsv_value_P3 hsv_value_P4];
x2=[metric_A4 metric_A5 metric_A6 metric_P3 metric_P4];
p=[x1;x2];

%desired output
T=[1;1;1;-1;-1];

%introduction of weights and  biase 

w1 = randn(1);
w2 = randn(1);
b  = randn(1);

% output estimation v1
v1 = x1(1)*w1 + x2(1)*w2 + b, 

if v1 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e1= [T(1)-y];

   
% output estimation v2
v2 = x1(2)*w1 + x2(2)*w2 + b, 

if v2 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e2= [T(2)-y];

% output estimation v3
v3 = x1(3)*w1 + x2(3)*w2 + b, 

if v3 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e3= [T(3)-y];

% output estimation v1
v4 = x1(4)*w1 + x2(4)*w2 + b, 

if v4 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e4= [T(4)-y];

% output estimation v1
v5 = x1(5)*w1 + x2(5)*w2 + b, 

if v5 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e5= [T(5)-y];

% Calculate Total error

e = abs(e1) + abs(e2) + abs(e3) + abs(e4) + abs(e5);


eta= 0.5;

while e ~= 0 


% TASK 2 updating the weights and baise
% w1(n+1) = w1(n) + eta\*e(n)\*x1(n); here 0 < eta < 1;


w1= w1 + eta*e(1) * x1(1);
w2= w2 + eta*e(1) * x2(1);
b=  b  + eta*e(1)

 %output estimation v1
v1 = x1(1)*w1 + x2(1)*w2 + b, 

if v1 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e1= [T(1)-y];

w1= w1 + eta*e(2) * x1(2);
w2= w2 + eta*e(2) * x2(2);
b=  b  + eta*e(2)

% output estimation v2
v2 = x1(2)*w1 + x2(2)*w2 + b, 

if v2 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e2= [T(2)-y];


w1= w1 + eta*e(3) * x1(3);
w2= w2 + eta*e(3) * x2(3);
b=  b  + eta*e(3)

% output estimation v3
v3 = x1(3)*w1 + x2(3)*w2 + b, 

if v3 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e3= [T(3)-y];

w1= w1 + eta*e(4) * x1(4);
w2= w2 + eta*e(4) * x2(4);
b=  b  + eta*e(4)

% output estimation v4
v4 = x1(4)*w1 + x2(4)*w2 + b, 

if v4 > 0;
    y = 1

else
    y =-1

end

%erro estimation 
e4= [T(4)-y];
w1= w1 + eta*e(5) * x1(5);
w2= w2 + eta*e(5) * x2(5);
b=  b  + eta*e(5)

%Testing
% output estimation v1
v1 = x1(1)*w1 + x2(1)*w2 + b, 

if v1 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e1= [T(1)-y];

   
% output estimation v2
v2 = x1(2)*w1 + x2(2)*w2 + b, 

if v2 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e2= [T(2)-y];

% output estimation v3
v3 = x1(3)*w1 + x2(3)*w2 + b, 

if v3 > 0;
    y = 1

else
    y =-1
end

%erro estimation 
e3= [T(3)-y];

% output estimation v1
v4 = x1(4)*w1 + x2(4)*w2 + b, 

if v4 > 0;
    y = 1

else
    y =-1

end

%erro estimation 
e4= [T(4)-y];

% output estimation v1

v5 = x1(5)*w1 + x2(5)*w2 + b, 

if v5 > 0;
    y = 1

else
    y =-1
end

% Calculate error

e = abs(e1) + abs(e2) + abs(e3) + abs(e4) + abs(e5); 

end

